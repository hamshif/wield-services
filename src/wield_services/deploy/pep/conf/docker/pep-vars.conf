
deploy_env : dev
debug_mode : nope
runtime_env : docker
kube_context : docker-desktop
//    If value is "yup" Starts a dud process to enable starting process from shell
container_maintainance_mode: yup

//module configuration name should be unique in the project
pep : {

  git: {
    branch: master
    commit: azurafekl
  }

  provisioner : kubernetes.io/no-provisioner

  namespace : wielder-services
  name : pep
  image : "pep:dev"
  cpu: 500m
  memory: 500Mi
  replicas : 1
  relativeCodePath : micros/perl/pep
  codePath : <PATH_TO_SUPER_PROJECT_ROOT>/micros/perl/pep
  mountPath : /storage
  capacityStorage : 200Mi

  nodePort : 30004
  port : 8004
  targetPort : 8004

  debugNodePort : 30005
  debugPort : 8005
  debugTargetPort : 8005

  observe_deploy : true
  observe_svc : false

  flask_app : app
  flask_env : development

  deploy_ports : [
    {
      name : pep
      containerPort : ${pep.targetPort}
    }
  ]

  service_ports : [
    {
      name : pep
      nodePort : ${pep.nodePort}
      port : ${pep.port}
      targetPort : ${pep.targetPort}
    }
  ]

  WieldServiceMode : {
    observe : true
    service_only : false
    debug_mode : true
    local_mount : true
  }
}

storage.volumeBindingMode : WaitForFirstConsumer

// A patch for PersistentVolume docker values
pv.spec.local : {
  path : ${pep.codePath}
}

pv.spec.nodeAffinity : {
  required : {
    nodeSelectorTerms : [
      {
        matchExpressions : [
          {
            key : kubernetes.io/hostname
            operator : In
            values : [
              ${kube_context}
            ]
          }
        ]
      }
    ]
  }
}

codePath : /Users/gideonbar/dev/data/micros/perl/pep

pep.packaging: {

  image_name: pep
  nachash: zefaa

  artifact_method: GET_DIR

  origin_path : /Users/gideonbar/dev/data/micros/perl/pep
  origin_regex : botSpawner
  git : ${pep.git}
  artifacts : [
  ]

}